{{>header}}

import FormData from 'form-data';
import fetch, { Headers } from 'node-fetch';
import type { RequestInit, Response } from 'node-fetch';
import type { AbortSignal } from 'node-fetch/externals';
import { ServiceRequest } from '@livelyvideo/ts-service-request';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { CustomConfig } from './CustomConfig';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/customGetUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>custom/getHeaders}}


{{>custom/getRequestBody}}


{{>custom/sendRequest}}


{{>custom/getResponseHeader}}


{{>custom/getResponseBody}}


{{>functions/catchErrorCodes}}


/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(serviceRequestConfig: CustomConfig, options: ApiRequestOptions): CancelablePromise<T> => {
	return new CancelablePromise(async (resolve, reject, onCancel) => {
		try {
			const url = getUrl(serviceRequestConfig, options);
			const formData = getFormData(options);
			const body = getRequestBody(options);
			const headers = await getHeaders(serviceRequestConfig, options);
			const configOptions = {
				method: options.method,
				url,
				retryOn4xx: serviceRequestConfig.retryOn4xx,
				retryStatuses: serviceRequestConfig.retryStatuses,
				retryIntervals: serviceRequestConfig.retryIntervals,
				followRedirect: serviceRequestConfig.followRedirect,
				timeout: serviceRequestConfig.timeout,
				time: serviceRequestConfig.time,
				json: body,
				formData
			}
			if (!onCancel.isCancelled) {
				// Just passing 'openapi-action' and 'openapi-service' to comply with the signature.
                const response = await serviceRequest.request('openapi-action', 'openapi-service', configOptions);
				const responseBody = await getResponseBody(response);
				const responseHeader = getResponseHeader(response, options.responseHeader);

				const result: ApiResult = {
					url,
					ok: response && response.response && response.response.ok,
					status: response && response.response && response.response.status,
					statusText: response && response.response && response.response.statusText,
					body: response.body,
				};

				catchErrorCodes(options, result);

				resolve(result.body);
			}
		} catch (error) {
			reject(error);
		}
	});
};
